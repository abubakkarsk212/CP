BinaryTreeNode<int>* buildTree1(int *postorder, int poS,int poE, int *inorder, int inS,int inE) {
    // Write your code here
    if(poS > poE || inS > inE){
        return NULL;
    }
    int rootV = postorder[poE];
    BinaryTreeNode<int> *root =new BinaryTreeNode<int>(rootV);
    int poLS = poS;
    int poLE;
    int poRS;
    int poRE = poE-1;
    int inLS = inS;
    int inLE;
    int inRS;
    int inRE = inE;
    int rootI;
    for(int i =inS; i<=inE;i++){
        if(inorder[i] == rootV){
            rootI = i;
            break;
        }
    }
    inLE = rootI-1;
    inRS = rootI+1;
    poLE = inLE - inLS + poLS;
    poRS = poLE+1;
    root->left = buildTree1(postorder,poLS,poLE,inorder,inLS,inLE);
    root->right = buildTree1(postorder,poRS,poRE,inorder,inRS,inRE);
    return root;    
}
BinaryTreeNode<int>* buildTree(int *postorder, int postLength, int *inorder, int inLength) {
    // Write your code here
    return buildTree1(postorder,0,postLength-1,inorder,0,inLength-1);
}
